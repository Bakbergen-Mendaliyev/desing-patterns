Основной механизм работы:
Когда вызывается метод drawShape() у конкретной фабрики, сначала вызывается метод createShape(),
который создаёт конкретный объект (например, Square или Circle).
Затем этот объект используется для вызова метода draw(), который и отображает фигуру.

Использование фабричного метода в данном примере имеет несколько ключевых преимуществ:
1. Разделение логики создания и использования объектов:
Фабричный метод отделяет логику создания объектов от логики их использования.
В данном случае, метод drawShape() не заботится о том, какой именно объект (круг или квадрат) будет создан.
Это позволяет изменить логику создания объектов, не трогая остальную часть кода.
2. Легкость расширения:
Если в будущем потребуется добавить новую фигуру, например, треугольник, достаточно будет создать новый класс Triangle
и соответствующую фабрику TriangleFactory, которая будет возвращать объекты Triangle.
Основная логика программы останется неизменной, так как метод drawShape() будет работать с любой новой фигурой
через общий интерфейс Shape.
3. Снижение связанности (loose coupling):
Благодаря фабричному методу, классы, использующие объекты Shape, не зависят от конкретных классов фигур
(например, Circle или Square). Они зависят только от абстракции — интерфейса Shape.
Это снижает связанность между классами и облегчает поддержку и модификацию кода.
4. Принцип единственной ответственности (SRP):
Каждый класс имеет свою узкую ответственность:
•	ShapeFactory занимается созданием объектов.
•	Конкретные классы фигур (Circle, Square) занимаются реализацией своей функциональности (например, рисованием).
Это соответствует принципу единственной ответственности, который улучшает читаемость и поддерживаемость кода.
5. Принцип открытости/закрытости (OCP):
Программа открыта для расширения, но закрыта для модификации.
Добавление новых типов фигур (например, новых классов фигур и фабрик для них) не требует изменения существующего кода,
а лишь добавляет новые классы. Это позволяет избегать внесения изменений в стабильный и протестированный код.
