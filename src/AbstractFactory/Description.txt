В данном примере реализован паттерн "Абстрактная фабрика".
Основная идея заключается в том, чтобы создавать семейства взаимосвязанных объектов (в данном случае кнопок и чекбоксов)
без указания их конкретных классов.

Интерфейсы для продуктов (Button и Checkbox):
В первую очередь,
определены интерфейсы для продуктов, которые будут создаваться — это кнопка (Button) и чекбокс (Checkbox):
Эти интерфейсы задают общий контракт для всех конкретных реализаций кнопок и чекбоксов,
позволяя программировать через абстракции, а не через конкретные классы.

Интерфейс фабрики (GUIFactory): Далее создается интерфейс самой фабрики,
которая должна создавать объекты Button и Checkbox:
Этот интерфейс определяет методы для создания каждой категории объектов (кнопок и чекбоксов),
оставляя конкретную реализацию этих методов на потом.

Конкретные фабрики (MacOSFactory и WindowsFactory): Каждая конкретная фабрика реализует интерфейс GUIFactory
 и предоставляет реализацию методов создания кнопок и чекбоксов для конкретной платформы (MacOS или Windows):

Конкретные реализации продуктов (кнопок и чекбоксов для разных платформ):
Каждая конкретная реализация кнопок и чекбоксов для разных платформ реализует соответствующие интерфейсы:

Клиентский код (Application): Application использует фабрику, чтобы создать нужные объекты,
не зная о конкретных реализациях кнопок и чекбоксов. Оно просто использует интерфейсы:
В конструкторе приложение получает фабрику (GUIFactory), которая создает объекты кнопок и чекбоксов.
Приложение взаимодействует с этими объектами через методы интерфейсов, не зная их точные классы.

Паттерн "Абстрактная фабрика" в данном примере имеет несколько важных преимуществ:

1. Создание семейств связанных объектов:
Абстрактная фабрика позволяет создавать семейства взаимосвязанных объектов (в данном случае кнопки и чекбоксы)
для различных платформ (например, Windows и MacOS). Это гарантирует совместимость создаваемых объектов —
все элементы пользовательского интерфейса будут соответствовать одной платформе,
что предотвращает возможность смешивания объектов из разных семейств
(например, кнопка для Windows с чекбоксом для MacOS).

2. Инкапсуляция создания объектов:
Клиентский код (в данном случае класс Application) не знает и не должен знать,
какие конкретные классы кнопок и чекбоксов создаются. Он работает через абстракции (интерфейсы Button и Checkbox).
Это упрощает поддерживаемость и расширение программы, так как изменение способа создания объектов
(например, добавление новой платформы) не требует изменения клиентского кода.

3. Простота расширения:
Добавление поддержки новой платформы (например, для Linux) осуществляется просто созданием новой фабрики,
реализующей интерфейс GUIFactory, а также классов для кнопок и чекбоксов, соответствующих этой платформе.
Основной код приложения при этом не изменяется.