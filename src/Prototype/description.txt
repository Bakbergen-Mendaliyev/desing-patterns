Паттерн "Прототип", позволяет создавать новые объекты через клонирование существующих объектов
вместо их явного создания через конструкторы.

Основные компоненты паттерна прототипа:
Базовый класс Enemy: Это абстрактный класс, который реализует интерфейс Cloneable, что позволяет клонировать объекты:
В классе Enemy определяется тип врага (например, орк или гоблин).
Метод clone() выполняет клонирование объекта, используя встроенную Java-реализацию клонирования через интерфейс Cloneable.
Он возвращает новый объект типа Enemy.

Конкретные классы Orc и Goblin: Это подклассы Enemy, которые представляют конкретных врагов:
Эти классы определяют конкретные типы врагов (орк и гоблин) через вызов конструктора базового класса Enemy,
который задает их тип.

(EnemyRegistry): Этот класс хранит набор предварительно созданных объектов врагов (прототипов)
и позволяет их клонировать по запросу:
В конструкторе EnemyRegistry инициализируются базовые прототипы врагов (гоблин и орк) и сохраняются в коллекции enemies.
Метод createEnemy() принимает тип врага (например, "goblin" или "orc") и возвращает его клон, используя метод clone().

Механизм работы прототипа:
Создание прототипов: В классе EnemyRegistry при инициализации создаются базовые экземпляры врагов (гоблин и орк),
которые хранятся как прототипы.

Клонирование объектов: Когда необходимо создать новый объект врага, клиентский код вызывает метод createEnemy()
и передает тип врага. В зависимости от типа, метод находит соответствующий объект-прототип в реестре (enemies)
и клонирует его с помощью метода clone().

Использование клонированных объектов: Клонированный объект полностью копирует состояние прототипа,
но является новым независимым экземпляром.
Это позволяет быстро создавать новые объекты врагов, не используя конструкторы каждый раз.

Преимущества паттерна "Прототип" в данном примере:
Избежание затрат на создание объектов: Вместо того чтобы каждый раз заново создавать объект через конструктор,
можно клонировать уже существующий объект.
Это особенно полезно, когда создание объектов требует больших затрат ресурсов или времени.

Гибкость при создании новых экземпляров: Прототипы позволяют быстро создавать новые объекты с идентичным состоянием.
Клонированный объект можно изменить, не влияя на прототип.

Поддержка динамических типов: Паттерн прототипа позволяет создавать объекты на основе существующих экземпляров,
что упрощает работу с типами, которые могут быть определены во время выполнения программы.

Упрощение создания новых объектов: Клиентскому коду не нужно знать, как именно создаётся объект,
он просто клонирует существующий экземпляр. Это снижает сложность создания новых экземпляров.
