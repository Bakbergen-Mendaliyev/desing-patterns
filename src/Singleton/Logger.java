package Singleton;

public class Logger {
    // Статическая приватная переменная для хранения единственного экземпляра класса Logger
    private static Logger instance;

    // Приватный конструктор предотвращает создание экземпляров класса извне
    private Logger() {
        // Здесь можно инициализировать ресурсы, например открыть файл для записи логов
        System.out.println("Logger инициализирован.");
    }

    /**
     *Returns the single instance of the Logger
     * Ensures only one instance of Logger exists.
     * @return the single instance of Logger
     */
    // Публичный статический метод для получения экземпляра класса Logger
    public static Logger getInstance() {
        // Проверяем, создан ли уже экземпляр класса
        if (instance == null) {
            // Если нет, создаем новый экземпляр
            instance = new Logger();
        }
        // Возвращаем экземпляр класса
        return instance;
    }

    /**
     * Writes a message to the log.
     * @param message message to be written to the log
     */
    // Пример метода для записи сообщения в лог
    public void log(String message) {
        // Логика записи сообщения в лог-файл или консоль
        System.out.println("Log: " + message);
    }
}

//Плюсы:
//
//Единственный экземпляр: Гарантирует, что класс имеет только один экземпляр.
//Глобальный доступ: Экземпляр доступен из любой точки программы.
//Ленивая инициализация: Экземпляр создается при первом обращении.

//Минусы:
//
//Трудность тестирования: Сложно мокировать синглтон при написании модульных тестов.
//Проблемы в многопоточности: В многопоточной среде может потребоваться синхронизация.
//Нарушение принципа единственной ответственности: Класс контролирует свое создание и основную функциональность.
