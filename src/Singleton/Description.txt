Паттерн "Одиночка" (Singleton), гарантирует создание только одного экземпляра класса и
предоставляет к нему глобальную точку доступа.

Как работает паттерн в классе Logger:
Приватная статическая переменная:
В классе объявлена приватная статическая переменная instance, которая хранит единственный экземпляр класса Logger.

Приватный конструктор:
Конструктор класса Logger сделан приватным, чтобы предотвратить создание экземпляров этого класса извне

Статический метод getInstance():
Этот метод возвращает единственный экземпляр класса.
Если экземпляр ещё не создан, он будет создан при первом вызове метода.
Это обеспечивает ленивую инициализацию (означает, что создание откладывается до первого использования)

Плюсы Singleton:
Гарантируется единственность экземпляра.
Глобальная точка доступа к этому экземпляру.
Ленивое создание (создание экземпляра только при первом обращении).

Минусы Singleton:
Может быть трудно тестировать (например, при написании модульных тестов сложно подменять Singleton).
Проблемы в многопоточной среде (в многопоточном приложении нужно будет синхронизировать доступ).
Может нарушать принцип единственной ответственности, так как класс управляет своим собственным созданием.