Описание:
Bridge — это структурный паттерн, который позволяет разделить абстракцию от её реализации так, чтобы и абстракцию, и реализацию можно было изменять независимо. Этот паттерн используется для уменьшения взаимосвязи между ними, обеспечивая гибкость и расширяемость кода.

Проблема:
Когда мы имеем сложную иерархию классов, которая нуждается в сочетании разных абстракций и реализаций, это может привести к экспоненциальному увеличению числа классов. Например, если у вас есть несколько типов фигур (абстракция) и несколько способов их отрисовки (реализация), классическая модель наследования приведёт к тому, что для каждой комбинации нужно будет создавать новый класс (например, RedCircle, GreenSquare и т.д.). Это нарушает принцип расширяемости и усложняет поддержку кода.

Как решает проблему:
Bridge решает эту проблему, разделяя иерархии абстракции и реализации. Абстракция (Shape) и реализация (DrawAPI) существуют отдельно, и связаны между собой через "мост" (интерфейс реализации). Таким образом, вы можете изменять или добавлять новые виды абстракций и реализации независимо друг от друга.

Описание и проблема паттерна Bridge в контексте кода
Проблема в коде:
Допустим, у нас есть разные типы фигур (например, круги и квадраты) и разные способы их отрисовки (например, красный и зелёный цвета). При использовании обычного наследования нам пришлось бы создать класс для каждой комбинации (например, RedCircle, GreenSquare). Это привело бы к быстрому росту числа классов по мере увеличения количества фигур и способов их отрисовки.

Как решает проблему:
Bridge отделяет абстракцию (фигуры) от её реализации (способы отрисовки), позволяя нам независимо добавлять новые виды фигур и способов их отрисовки, не изменяя существующие классы.

Объяснение работы:
Интерфейс DrawAPI — это интерфейс, который представляет способ отрисовки. Он служит мостом между абстракцией (Shape) и конкретной реализацией (например, RedCircle или GreenCircle).
Абстракция Shape — это абстрактный класс, который содержит ссылку на интерфейс DrawAPI и делегирует ему конкретные задачи по отрисовке. Конкретные фигуры (например, Circle) расширяют этот класс и вызывают методы реализации через "мост".
Классы реализаций (RedCircle и GreenCircle) — это классы, которые конкретно реализуют логику отрисовки в зависимости от контекста (например, красный или зелёный цвет).
Клиентский код (в Main.java) создаёт экземпляры фигур с различными реализациями отрисовки, что демонстрирует независимость абстракции от реализации.