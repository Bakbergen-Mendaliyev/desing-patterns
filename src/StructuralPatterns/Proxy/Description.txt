Описание:
Proxy — это структурный паттерн, который предоставляет объект-заместитель для контроля доступа к другому объекту. Этот объект-заместитель действует как интерфейс для взаимодействия с реальным объектом, контролируя, изменяя или добавляя поведение перед вызовом методов реального объекта. Proxy может использоваться для различных целей, таких как контроль доступа, кэширование, логирование, ленивую инициализацию и т.д.

Проблема:
Иногда прямой доступ к объекту может быть нежелательным или неэффективным. Например, объект может быть тяжеловесным для создания или потреблять много ресурсов, доступ к нему может требовать аутентификации, или объект может находиться в удалённой системе. В таких случаях мы можем использовать объект-заместитель (Proxy), чтобы управлять доступом к реальному объекту и добавлять дополнительные функции.

Как решает проблему:
Proxy решает эту проблему, предоставляя суррогат или заместителя для объекта. Клиент взаимодействует с объектом через Proxy, который контролирует доступ к реальному объекту и управляет его созданием, использованием или доступом. Таким образом, Proxy может добавлять новые возможности, не изменяя реальный объект.

Описание и проблема паттерна Proxy в контексте кода
Проблема в коде:
Представим, что у нас есть объект, который выполняет сложные операции и требует много времени на загрузку (например, изображение). Если сразу загружать этот объект, это может замедлить систему, особенно если объект может быть не нужен на момент инициализации. В таком случае мы можем использовать Proxy, чтобы загружать объект только по требованию.

Как решает проблему:
Proxy создаёт объект-заместитель, который сначала выполняет минимальные действия, такие как проверка, загружен ли объект, и только при необходимости загружает и отображает реальный объект. Это позволяет избежать долгих задержек на начальных этапах и управлять созданием объекта по требованию (ленивая инициализация).

Объяснение работы:
Интерфейс Image:
Это общий интерфейс для всех типов изображений. У него есть метод display(), который отвечает за отображение изображения.

Класс RealImage:
Это реальный объект, представляющий изображение. Он выполняет тяжёлую операцию загрузки изображения с диска при создании. Метод display() отвечает за отображение изображения после его загрузки.

Класс ProxyImage:
Это класс-заместитель (Proxy), который оборачивает реальный объект RealImage. Он используется для ленивой загрузки — реальный объект загружается только при первом вызове метода display().
Когда клиент вызывает display(), Proxy проверяет, загружено ли изображение. Если оно ещё не загружено, Proxy загружает его и затем делегирует реальную работу объекту RealImage.

Клиентский код:
Клиент создаёт изображение через Proxy, но реальный объект загружается только тогда, когда он действительно требуется (при первом вызове display()).
При последующих вызовах метода display() реальный объект уже загружен, и Proxy просто делегирует вызов без повторной загрузки.