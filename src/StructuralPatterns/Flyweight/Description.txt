Описание:
Flyweight — это структурный паттерн, который используется для минимизации использования памяти и улучшения производительности программы за счёт повторного использования одинаковых объектов. Он позволяет разделять состояния объектов на внутренние (разделяемые между объектами) и внешние (индивидуальные для каждого объекта) и эффективно управлять этими объектами, создавая их только один раз.

Проблема:
Когда в системе нужно создать огромное количество однотипных объектов, это может привести к чрезмерному использованию памяти. Например, если у вас есть графическое приложение, где нужно отображать тысячи объектов одного типа (например, деревья, символы текста или графические элементы), создание отдельного объекта для каждого элемента может занять слишком много памяти.

Как решает проблему:
Flyweight решает эту проблему, разделяя объекты на внутреннее состояние, которое является общим для всех объектов (например, форма, цвет), и внешнее состояние, которое может быть уникальным для каждого объекта (например, координаты на экране). Вместо создания тысячи отдельных объектов, мы создаём несколько "легковесных" объектов и переиспользуем их, передавая уникальные внешние параметры.


Описание и проблема паттерна Flyweight в контексте кода
Проблема в коде:
Представим, что у нас есть графическая программа, которая должна отрисовать много одинаковых объектов, например, кругов с одинаковым цветом, но разными координатами и размерами. Если для каждого круга создавать отдельный объект, то программа может сильно загружать память. Нам нужно переиспользовать общие свойства (цвет, форма) между объектами, создавая каждый объект только один раз, и каждый раз передавать уникальные параметры (координаты и радиус).

Как решает проблему:
Паттерн Flyweight разделяет состояние объектов на внутреннее (например, цвет) и внешнее (координаты и радиус). Мы создаём и храним только один объект для каждого цвета круга (внутреннее состояние), а при отрисовке передаём ему внешнее состояние (координаты и радиус), что позволяет значительно экономить память.

Объяснение работы:
Интерфейс Shape:

Это общий интерфейс для всех фигур. В данном случае, у него есть метод draw(), который принимает параметры для отрисовки фигуры — координаты и радиус.
Класс Circle:

Это реализация фигуры (круг), которая использует цвет как внутреннее состояние. Это означает, что для каждого цвета создаётся только один объект. Когда клиент хочет отрисовать круг с этим цветом, мы передаём ему координаты и радиус как внешнее состояние.
Класс ShapeFactory:

Этот класс управляет созданием объектов Flyweight (кругов). Он гарантирует, что для каждого цвета создаётся только один объект, и если такой объект уже существует, фабрика возвращает его, а не создаёт новый.
Это позволяет значительно экономить память, так как повторно используются уже созданные объекты.
Клиентский код (в Main.java):

Клиент создаёт множество кругов с разными цветами, координатами и радиусами. Однако благодаря фабрике и паттерну Flyweight, круги с одним и тем же цветом создаются только один раз, а последующие круги с тем же цветом используют уже созданные объекты.
Таким образом, количество создаваемых объектов уменьшается, и память используется более эффективно.

Отличия
Prototype создает уникальные объекты на основе образца и используется для избежания сложностей нового создания.
Flyweight сосредоточен на минимизации использования памяти за счет разделения состояния между множеством объектов.

