Основные компоненты паттерна строителя:
Интерфейс строителя (PizzaBuilder): Это интерфейс, который определяет шаги для создания объекта пиццы:
Этот интерфейс включает методы для поэтапного построения пиццы —
создания теста, соуса и начинки, а также метод getPizza() для получения готовой пиццы.

Конкретные строители (HawaiianPizzaBuilder и SpicyPizzaBuilder):
Это классы, которые реализуют интерфейс PizzaBuilder, каждый из которых создаёт конкретный тип пиццы:

HawaiianPizzaBuilder — строит гавайскую пиццу:
SpicyPizzaBuilder — строит острую пиццу:

Класс продукта (Pizza): Класс Pizza представляет сам объект пиццы, который строится с использованием строителя.
Он включает методы для установки теста, соуса и начинки, а также метод для отображения состава пиццы:

Директор (Waiter): Класс Waiter является директором, который управляет процессом создания пиццы, используя объект строителя.
Он координирует последовательность вызовов методов строителя для создания пиццы:

Механизм работы:
Создание пиццы: Клиент выбирает тип строителя (HawaiianPizzaBuilder или SpicyPizzaBuilder) и передает его директору (Waiter).

Конструирование пиццы: Директор вызывает методы строителя в нужной последовательности (сначала тесто, затем соус и начинка),
используя метод constructPizza().
Каждый из этих шагов добавляет соответствующую часть пиццы (тесто, соус, начинку).

Получение готового продукта: После того как все этапы завершены, метод getPizza() возвращает готовую пиццу,
которая затем может быть использована (например, для отображения состава пиццы).

Использование паттерна "Строитель" в данном случае имеет несколько важных преимуществ:

1. Контроль над процессом создания сложных объектов:
Паттерн "Строитель" позволяет отделить логику создания объекта (в данном случае пиццы) от его представления.
Это даёт гибкость в процессе создания сложных объектов, где можно пошагово добавлять детали (тесто, соус, начинку),
изменять последовательность этапов или пропускать некоторые из них, если это необходимо.

2. Разделение кода на отдельные компоненты:
Классы конкретных строителей (например, HawaiianPizzaBuilder и SpicyPizzaBuilder) содержат только логику,
связанную с созданием конкретного типа пиццы. Это облегчает поддержку кода, так как все изменения, касающиеся того,
как создаётся пицца, можно сделать в конкретном строителе, не затрагивая другие части системы.

3. Легкость добавления новых вариаций продукта:
Чтобы добавить новый тип пиццы (например, "Маргарита"), достаточно создать новый класс строителя,
который реализует интерфейс PizzaBuilder и описывает шаги для создания этой конкретной пиццы.
При этом основной код директора (класс Waiter) и клиента остаётся неизменным.
Это упрощает расширение функциональности программы.

4. Гибкость в использовании:
Директор (Waiter) позволяет управлять процессом создания пиццы с помощью конструктора,
что упрощает повторное использование кода. Например, можно создать разные наборы действий для создания пиццы
(сначала тесто, потом начинка и т.д.), а также легко заменить одного строителя другим для создания другого типа пиццы.

5. Инкапсуляция деталей создания объекта:
Клиентский код (который использует пиццу) не знает и не должен знать, как именно пицца создаётся.
Это позволяет скрыть детали реализации за интерфейсом строителя, что упрощает понимание и использование кода,
а также делает его более модульным.

6. Повышение читаемости и поддерживаемости кода:
Каждый шаг создания пиццы вынесен в отдельные методы (например, buildDough(), buildSauce(), buildTopping()),
что делает код более структурированным и читаемым.
Это особенно полезно, когда объект сложен и его создание требует нескольких шагов.
Каждый метод отвечает за одну конкретную задачу, что упрощает отладку и модификацию программы.